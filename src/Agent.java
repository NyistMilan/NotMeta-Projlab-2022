//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Agent.java
//  @ Date : 2022. 03. 23.
//  @ Author : 
//
//

/** A Virologist can use an Agent to infect another Virologist (or himself).*/
public abstract class Agent implements Collectable {
	/** The number of turns a Virologist can store the Agent in his Backpack.*/
	protected int warranty;

	/** The number of turns an Agent stays active on an infected Virologist*/
	protected int duration;

	public int DecreaseWarranty() {
		Skeleton.methodCall(this);
		warranty--;
		Skeleton.methodReturn(this);
		return warranty;
	}

	public int DecreaseDuration() {
		Skeleton.methodCall(this);
		duration--;
		Skeleton.methodReturn(this);
		return duration;
	}
	
	/**
	 * Applies the effects of the Agent to a Virologist
	 *
	 * @param v the Virologist the Agent gets applied to
	 * */
	public abstract void Apply(Virologist v);
	
	/**
	 * Removes the effects of the Agent from a Virologist
	 *
	 * @param v the Virologist the Agent gets removed from
	 * */
	public void Remove(Virologist v) {
		Skeleton.methodCall(this, "v");
		v.RefreshEffects();
		Skeleton.methodReturn(this);
	}

	/**
	 * Adds the Agent to a Virologist's Backpack
	 *
	 * @param v the Virologist
	 * @param b the Backpack
	 * @return true if the adding was successful, false if the adding failed
	 */
	@Override
	public boolean AddToBackpack(Virologist v, Backpack b) {
		Skeleton.methodCall(this, "v", "b");
		v.GetBackpack().Add(this);
		boolean isAdded = Skeleton.yesOrNoInput("Was added?");
		Skeleton.methodReturn(this);
		return isAdded;
	}

	/**
	 * Removes the Agent from a Virologist's Backpack
	 *
	 * @param v the Virologist
	 * @param b the Backpack
	 */
	@Override
	public void RemoveFromBackpack(Virologist v, Backpack b) {
		Skeleton.methodCall(this, "v","b");
		v.GetBackpack().Remove(this);
		Skeleton.methodReturn(this);
	}
}
