//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Equipment.java
//  @ Date : 2022. 03. 23.
//  @ Author : 
//
//

import java.util.ArrayList;

/**
 * The Virologist can pick up up to 3 Equipment.
 * They apply their effects on the Virologist until he drops them
 * or another Virologist steal them from him
 * */
public abstract class Equipment implements Collectable {
	/** Applies its effect to a Virologist*/
	public abstract void Apply(Virologist v);

	/** Removes its effect from a Virologist*/
	public void Remove(Virologist v) {
		Skeleton.methodCall(this, "v");
		v.RefreshEffects();
		Skeleton.methodReturn(this);
	}

	/**
	 * The Equipment is added to the Backpack.
	 * If there is not enough space to pick it up the Virologist can drop another Equipment.
	 *
	 * @param v the Virologist the backpack belongs to(Only used sometimes)
	 * @param b the Backpack it gets added to
	 */
	@Override
	public boolean AddToBackpack(Virologist v, Backpack b) {
		Skeleton.methodCall(this, "v","b");
		b.Add(this);
		if(b.GetEquipments().size() == 3){
			int i = Skeleton.askForInput("Which equipment do you want to drop?", 1, 3);
			Equipment e = b.GetEquipments().get(i-1);
			ArrayList<Collectable> list = new ArrayList<>();
			list.add(e);
			v.DropCollectable(list);
		}
		boolean isAdded = Skeleton.yesOrNoInput("Was added?");
		Skeleton.methodReturn(this);
		return isAdded;
	}

	/**
	 * The Equipment is removed from the Backpack.
	 * @param v the Virologist the backpack belongs to(Only used sometimes)
	 * @param b the Backpack it gets removed from
	 */
	@Override
	public void RemoveFromBackpack(Virologist v, Backpack b) {
		Skeleton.methodCall(this, "v", "b");
		b.Remove(this);
		Skeleton.methodReturn(this);
	}
}
